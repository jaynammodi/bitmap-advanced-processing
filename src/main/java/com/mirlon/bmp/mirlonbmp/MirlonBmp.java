/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mirlon.bmp.mirlonbmp;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.imageio.ImageIO;
import javax.swing.*;
/**
 *
 * @author Mr.Rathod
 */
public class MirlonBmp extends javax.swing.JFrame {

    /**
     * Creates new form FileChooser
     */
    public MirlonBmp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileDialog = new javax.swing.JFileChooser();
        jButton1 = new javax.swing.JButton();

        fileDialog.setDialogTitle("Select BMP File");
        fileDialog.setName("fileDialog"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BMP File Manipulation");
        setName("chooserFrame"); // NOI18N

        jButton1.setText("Choose File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    JLabel jLabel1 = new JLabel();
    JLabel jLabel2 = new JLabel();
    
    JPanel btnPanel = new JPanel();
    
    JButton prevBtn = new JButton();
    JButton nxtBtn = new JButton();
    JButton exitBtn = new JButton();
    
    JFrame editorFrame = new JFrame("Image Viewer");
    
    int flag = 0;
    
    
    
    public BufferedImage turnImgGrayscale(BufferedImage image){
        
        BufferedImage result = new BufferedImage(
                    image.getWidth(),
                    image.getHeight(),
                    BufferedImage.TYPE_INT_RGB);
        
        Graphics2D graphic = result.createGraphics();
        graphic.drawImage(image, 0, 0, Color.WHITE, null);
        
        for (int i = 0; i < result.getHeight(); i++) {
            for (int j = 0; j < result.getWidth(); j++) {
                Color c = new Color(result.getRGB(j, i));
                
                int red = (int) (c.getRed() * 0.299);
                int green = (int) (c.getGreen() * 0.587);
                int blue = (int) (c.getBlue() * 0.114);
                
                Color newColor = new Color(
                        red + green + blue,
                        red + green + blue,
                        red + green + blue);
                
                result.setRGB(j, i, newColor.getRGB());
            }
        }
        
        return result;
    }
    
    public BufferedImage applyDithering(BufferedImage inpImage){
        
        BufferedImage image = new BufferedImage(
                    inpImage.getWidth(),
                    inpImage.getHeight(),
                    BufferedImage.TYPE_INT_RGB);
        
        Graphics2D graphic = image.createGraphics();
        graphic.drawImage(inpImage, 0, 0, Color.WHITE, null);
        
        // TODO : ??
        Color newBlack = new Color(0,0,0);
        Color newWhite = new Color(255,255,255);
                
        for (int i = 0; i < image.getWidth(); i+=2) {   // Using a 2x2 matrix for dithering
            for (int j = 0; j < image.getHeight(); j+=2) {
                
                Color c1 = new Color(image.getRGB(i, j));
                Color c2 = new Color(image.getRGB(i+1, j));
                Color c3 = new Color(image.getRGB(i, j+1));
                Color c4 = new Color(image.getRGB(i+1, j+1));
                
                var p1 = c1.getRed();
                var p2 = c2.getRed();
                var p3 = c3.getRed();
                var p4 = c4.getRed();
                
                var avg = 256 - (p1+p2+p3+p4)/4;
                
                if(avg > 0)
                    image.setRGB(i+1, j+1, newBlack.getRGB());
                else
                    image.setRGB(i+1, j+1, newWhite.getRGB());
                
                if(avg > 64)
                    image.setRGB(i, j, newBlack.getRGB());
                else
                    image.setRGB(i, j, newWhite.getRGB());
                
                if(avg > 128)
                    image.setRGB(i+1, j, newBlack.getRGB());
                else
                    image.setRGB(i+1, j, newWhite.getRGB());
                
                if(avg > 192)
                    image.setRGB(i, j+1, newBlack.getRGB());
                else
                    image.setRGB(i, j+1, newWhite.getRGB());
            }
        }
        
        return image;
    }
   
    public BufferedImage applyLevels(BufferedImage image){
        
        int N = image.getWidth();
        int M = image.getHeight();
        int totPix = N*M;
        
        BufferedImage result = new BufferedImage(
                    image.getWidth(),
                    image.getHeight(),
                    BufferedImage.TYPE_INT_RGB);
        
        Graphics2D graphic = result.createGraphics();
        graphic.drawImage(image, 0, 0, Color.WHITE, null);
        
        // Creating Histogram & Cumulative Histogram Array
        // Red
        int H_r[] = new int[256];
        int CH_r[] = new int[256];
        // Green
        int H_g[] = new int[256];
        int CH_g[] = new int[256];
        // Blue
        int H_b[] = new int[256];
        int CH_b[] = new int[256];
        
        // Creating Threshold Array
        float T_r[] = new float[256];
        float T_g[] = new float[256];
        float T_b[] = new float[256];
        
        // Filling the array
        for (int i = 0; i < image.getWidth(); i++) {
            for (int j = 0; j < image.getHeight(); j++) {
                
                Color pxCol = new Color(image.getRGB(i,j ));
                
                // For Red Channel
                int r = pxCol.getRed();
                int g = pxCol.getGreen();
                int b = pxCol.getBlue();
                
                System.out.println(" > Coords : " + "(" + i + "," + j + ") | R: " + r + " | G: " + g + " | B: " + b);
                
                // Incrementing values in Histogram Array
                H_r[r] += 1;
                H_g[g] += 1;
                H_b[b] += 1;
            }
        }
        
        // Developing Cumulative Histogram
        CH_r[0] = H_r[0];
        CH_g[0] = H_g[0];
        CH_b[0] = H_b[0];

        
        for(int x = 1; x < 256; x++){
            CH_r[x] = CH_r[x-1] + H_r[x];
            CH_g[x] = CH_g[x-1] + H_g[x];
            CH_b[x] = CH_b[x-1] + H_b[x];            
        }
        
        // Calculating threshold array
        for(int i = 0; i < 256; i++){
            T_r[i] = (float)((CH_r[i] * 255.0)/(float)totPix);
            T_g[i] = (float)((CH_g[i] * 255.0)/(float)totPix);
            T_b[i] = (float)((CH_b[i] * 255.0)/(float)totPix);            
        }
        
        for(int i = 0; i < result.getWidth(); i++){
            for(int j = 0; j < result.getHeight(); j++){
                
                Color pxCol = new Color(image.getRGB(i,j ));
                
                int r = pxCol.getRed();
                int g = pxCol.getGreen();
                int b = pxCol.getBlue();
                
                int rVal = (int) T_r[r];
                int gVal = (int) T_g[g];
                int bVal = (int) T_b[b];
                
                Color newCol = new Color(rVal, gVal, bVal);
                result.setRGB(i, j, newCol.getRGB());
            }
        }
        
        return result;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        System.out.println(evt);
        
        prevBtn.setText("<");
        nxtBtn.setText(">");
        exitBtn.setText("x");
        
        btnPanel.setLayout(new BoxLayout(btnPanel, BoxLayout.Y_AXIS));
        
        btnPanel.add(exitBtn);
        btnPanel.add(prevBtn);
        btnPanel.add(nxtBtn);
        
        int returnVal = fileDialog.showOpenDialog(this);
        
        editorFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
     
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileDialog.getSelectedFile();
            
            System.out.print(" > Selected File: ");
            System.out.println(selectedFile.getAbsolutePath());
            
            try{
                System.out.print(" > Original | Grayscale | Flag = ");
                System.out.println(flag);
                
                BufferedImage selImg = ImageIO.read(selectedFile);
                ImageIcon imageIcon = new ImageIcon(selImg);
                
                BufferedImage grayImg = turnImgGrayscale(selImg);
                ImageIcon grayImgIcon = new ImageIcon(grayImg);
                
                BufferedImage ditheredImg = applyDithering(grayImg);
                ImageIcon ditheredIcon = new ImageIcon(ditheredImg);
                
                BufferedImage lvldImg = applyLevels(selImg);
                ImageIcon lvldIcon = new ImageIcon(lvldImg);
                
//                File of = new File("C:\\Users\\Mr.Rathod\\Documents\\gray.bmp");
//                ImageIO.write(grayImg, "bmp", of);

//                Color exCol = new Color(grayImg.getRGB(100,100 ));
//                System.out.print("R:");
//                System.out.println(exCol.getRed());
//                System.out.print("G:");
//                System.out.println(exCol.getGreen());
//                System.out.print("B:");
//                System.out.println(exCol.getBlue());

                this.setVisible(false);
                
                editorFrame.setTitle("Image Viewer - Original | Grayscale (1)");
                
                jLabel1.setIcon(imageIcon);
                jLabel2.setIcon(grayImgIcon);
                
                editorFrame.setLayout(new FlowLayout());
                
                editorFrame.getContentPane().add(jLabel1);
                editorFrame.getContentPane().add(jLabel2);
                
                editorFrame.getContentPane().add(btnPanel);

//                editorFrame.getContentPane().add(nxtBtn);
//                editorFrame.getContentPane().add(exitBtn);
                
                editorFrame.pack();
                
                editorFrame.setLocationRelativeTo(null);
                
                editorFrame.setVisible(true);
                
                nxtBtn.addActionListener((ActionEvent e) -> {
                    flag++;
                    
                    System.out.print(" > Next Button Pressed. Flag = ");
                    System.out.println(flag);
                    
                    switch(flag){
                        case 1 -> {
                            System.out.print(" > Grayscale | Ordered Dithering | Flag = ");
                            System.out.println(flag);
                            
                            editorFrame.setTitle("Image Viewer - Grayscale | Dithered (2)");
                            
                            jLabel1.setIcon(grayImgIcon);
                            jLabel2.setIcon(ditheredIcon);
                        }
                        case 2 -> {
                            System.out.print(" > Original | Auto Level | Flag = ");
                            System.out.println(flag);
                            
                            editorFrame.setTitle("Image Viewer - Original | Leveled (3)");
                            
                            jLabel1.setIcon(imageIcon);
                            jLabel2.setIcon(lvldIcon);
                        }
                        case 3 -> {
                            System.out.println(" > Flag = 3 | Resetting to 0.");
                            
                            flag = 0;
                            
                            editorFrame.setTitle("Image Viewer - Original | Grayscale (1)");
                            
                            jLabel1.setIcon(imageIcon);
                            jLabel2.setIcon(grayImgIcon);
                        }
                    }
                });
                
                prevBtn.addActionListener((ActionEvent e) -> {
                    flag--;
                    
                    System.out.print(" > Previous Button Pressed. Flag = ");
                    System.out.println(flag);
                    
                    switch(flag){
                        case -1 -> {
                            System.out.println(" > Flag = -1 | Resetting to 2.");
                            
                            flag = 2;
                            
                            editorFrame.setTitle("Image Viewer - Original | Leveled (3)");
                            
                            jLabel1.setIcon(imageIcon);
                            jLabel2.setIcon(lvldIcon);
                        }
                        case 0 -> {
                            System.out.println(" > Flag = 0 | Resetting.");
                   
                            editorFrame.setTitle("Image Viewer - Original | Grayscale (1)");
                            
                            jLabel1.setIcon(imageIcon);
                            jLabel2.setIcon(grayImgIcon);
                        }
                        case 1 -> {
                            System.out.print(" > Grayscale | Ordered Dithering | Flag = ");
                            System.out.println(flag);
                            
                            editorFrame.setTitle("Image Viewer - Grayscale | Dithered (2)");
                            
                            jLabel1.setIcon(grayImgIcon);
                            jLabel2.setIcon(ditheredIcon);
                        }
                        case 2 -> {
                            System.out.print(" > Original | Auto Level | Flag = ");
                            System.out.println(flag);
                            
                            editorFrame.setTitle("Image Viewer - Original | Leveled (3)");
                            
                            jLabel1.setIcon(imageIcon);
                            jLabel2.setIcon(lvldIcon);
                        }
                    }
                });
                
                exitBtn.addActionListener((ActionEvent e) -> {
                    System.out.println(" > Exit Button Pressed.");
                    System.exit(0);
                });
                
            } catch(IOException e){
                System.out.println(" > Unable to Read the Input Image.");
            }
        } else {
            System.out.println(" > File access cancelled by user.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MirlonBmp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MirlonBmp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MirlonBmp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MirlonBmp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MirlonBmp().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileDialog;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
